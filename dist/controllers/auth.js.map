{"version":3,"sources":["../../server/controllers/auth.js"],"names":["Register","req","res","user","userRegister","body","then","json","message","catch","status","err","type","userType","newUser","Users","Promise","resolve","reject","register","password","Login","salt","undefined","hash","AuthMe","authenticated","RedirectNoAuth","next","redirect","Logout","logout"],"mappings":";;;;;;;;;AAAA;;;;AACA;;;;AAEA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;AACO,IAAMA,8BAAW,SAAXA,QAAW,CAACC,GAAD,EAAMC,GAAN,EAAc;AACpC,MAAIC,OAAOF,IAAIE,IAAf;AACAC,eAAaH,IAAII,IAAjB,EACGC,IADH,CACQ,gBAAQ;AACZ,WAAOJ,IAAIK,IAAJ,CAAS;AACdC,eAAS,yBADK;AAEdL,yBAAWA,IAAX;AAFc,KAAT,CAAP;AAID,GANH,EAOGM,KAPH,CAOS,eAAO;AACZ,WAAOP,IAAIQ,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAC1BC,eAASG,IAAIH;AADa,KAArB,CAAP;AAGD,GAXH;AAYD,CAdM;;AAgBP,IAAMJ,eAAe,SAAfA,YAAe,CAACC,IAAD,EAAOF,IAAP,EAAgB;AACnC,MAAIS,OAAOP,KAAKQ,QAAhB;AACA,MAAIC,UAAU,IAAIC,eAAJ,cACTV,IADS;AAEZQ,cAAUD;AAFE,KAAd;;AAKA,SAAO,IAAII,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCH,oBAAMI,QAAN,CAAeL,OAAf,EAAwBT,KAAKe,QAA7B,EAAuC,UAACT,GAAD,EAAMR,IAAN,EAAe;AACpD,UAAIQ,GAAJ,EAAS;AACPO,eAAOP,GAAP;AACD;AACDM,cAAQd,IAAR;AACD,KALD;AAMD,GAPM,CAAP;AAQD,CAfD;;AAiBO,IAAMkB,wBAAQ,SAARA,KAAQ,CAACpB,GAAD,EAAMC,GAAN,EAAc;AACjC,MAAIC,OAAOF,IAAIE,IAAf;AACA,SAAOD,IAAIK,IAAJ,CAAS;AACdC,aAAS,kBADK;AAEdL,uBACKF,IAAIE,IADT;AAEEmB,YAAMC,SAFR;AAGEC,YAAMD;AAHR;AAFc,GAAT,CAAP;AAQD,CAVM;;AAaP;AACO,IAAME,0BAAS,SAATA,MAAS,CAACxB,GAAD,EAAMC,GAAN,EAAc;AAClC,MAAI,CAACD,IAAIE,IAAT,EAAgB;AACd,WAAOD,IAAIK,IAAJ,CAAS;AACdmB,qBAAe,IADD;AAEdvB,YAAMA;AAFQ,KAAT,CAAP;AAID;AACD,SAAOD,IAAIK,IAAJ,CAAS;AACdmB,mBAAe;AADD,GAAT,CAAP;AAGD,CAVM;;AAYP;AACO,IAAMC,0CAAiB,SAAjBA,cAAiB,CAAC1B,GAAD,EAAMC,GAAN,EAAW0B,IAAX,EAAoB;AAChD,MAAIzB,OAAOF,IAAIE,IAAf;AACA,MAAI,CAACA,IAAL,EAAW;AACT,WAAOD,IAAI2B,QAAJ,CAAa,WAAb,CAAP;AACD;AACD,SAAOD,MAAP;AACD,CANM;;AAQA,IAAME,0BAAS,SAATA,MAAS,CAAC7B,GAAD,EAAMC,GAAN,EAAc;AAClCD,MAAI8B,MAAJ;AACA7B,MAAIK,IAAJ,CAAS;AACPC,aAAS;AADF,GAAT;AAGD,CALM","file":"auth.js","sourcesContent":["import regeneratorRuntime from \"regenerator-runtime\";\nimport passport from \"passport\";\n\nimport Users from \"../models/Users\";\nimport { resolve } from \"path\";\nimport cfg from \"./config\";\nimport jwt from \"jsonwebtoken\";\nimport PassportJWT from \"passport-jwt\";\nexport const Register = (req, res) => {\n  let user = req.user\n  userRegister(req.body)\n    .then(user => {\n      return res.json({\n        message: \"Registered Successfully\",\n        user: { ...user }\n      });\n    })\n    .catch(err => {\n      return res.status(400).json({\n        message: err.message\n      });\n    });\n};\n\nconst userRegister = (body, user) => {\n  let type = body.userType;\n  let newUser = new Users({\n    ...body,\n    userType: type\n  });\n\n  return new Promise((resolve, reject) => {\n    Users.register(newUser, body.password, (err, user) => {\n      if (err) {\n        reject(err);\n      }\n      resolve(user);\n    });\n  });\n};\n\nexport const Login = (req, res) => {\n  let user = req.user\n  return res.json({\n    message: 'Login Successful',\n    user: {\n      ...req.user,\n      salt: undefined,\n      hash: undefined,\n    },\n  })\n}\n\n\n// Get user data from client side\nexport const AuthMe = (req, res) => {\n  if (!req.user ) {\n    return res.json({\n      authenticated: true,\n      user: user\n    });\n  }\n  return res.json({\n    authenticated: false\n  });\n};\n\n// Auth Middleware\nexport const RedirectNoAuth = (req, res, next) => {\n  let user = req.user\n  if (!user) {\n    return res.redirect(\"/whatever\");\n  }\n  return next();\n};\n\nexport const Logout = (req, res) => {\n  req.logout();\n  res.json({\n    message: \"Logout\"\n  });\n};\n"]}