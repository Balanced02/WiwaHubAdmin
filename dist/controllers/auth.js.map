{"version":3,"sources":["../../server/controllers/auth.js"],"names":["Register","req","res","user","JSON","parse","headers","userRegister","body","then","json","message","catch","status","err","type","userType","newUser","Users","Promise","resolve","reject","register","password","Login","passport","authenticate","session","info","login","send","token","jwt","sign","cfg","jwtSecret","AuthMe","username","authenticated","RedirectNoAuth","next","redirect","Logout","logout"],"mappings":"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","file":"auth.js","sourcesContent":["import regeneratorRuntime from \"regenerator-runtime\";\nimport passport from \"passport\";\n\nimport Users from \"../models/Users\";\nimport { resolve } from \"path\";\nimport cfg from \"./config\";\nimport jwt from \"jsonwebtoken\";\nimport PassportJWT from \"passport-jwt\";\nexport const Register = (req, res) => {\n  let user = JSON.parse(req.headers.user);\n  userRegister(req.body)\n    .then(user => {\n      return res.json({\n        message: \"Registered Successfully\",\n        user: { ...user }\n      });\n    })\n    .catch(err => {\n      return res.status(400).json({\n        message: err.message\n      });\n    });\n};\n\nconst userRegister = (body, user) => {\n  let type = body.userType;\n  let newUser = new Users({\n    ...body,\n    userType: type\n  });\n\n  return new Promise((resolve, reject) => {\n    Users.register(newUser, body.password, (err, user) => {\n      if (err) {\n        reject(err);\n      }\n      resolve(user);\n    });\n  });\n};\n\nexport const Login = (req, res) => {\n  passport.authenticate(\"jwt\", { session: false }, (err, user, info) => {\n    if (err || !user) {\n      return res.status(400).json({\n        message: \"Something is not right\",\n        user: user\n      });\n    }\n    req.login(user, { session: false }, err => {\n      if (err) {\n        res.send(err);\n      }\n      // generate a signed son web token with the contents of user object and return it in the response\n      const token = jwt.sign(user, cfg.jwtSecret);\n      return res.json({ user, token });\n    });\n  });\n};\n\n// Get user data from client side\nexport const AuthMe = (req, res) => {\n  let user = JSON.parse(req.headers.user);\n  if (user.username) {\n    return res.json({\n      authenticated: true,\n      user: user\n    });\n  }\n  return res.json({\n    authenticated: false\n  });\n};\n\n// Auth Middleware\nexport const RedirectNoAuth = (req, res, next) => {\n  let user = JSON.parse(req.headers.user);\n  if (!user) {\n    return res.redirect(\"/whatever\");\n  }\n  return next();\n};\n\nexport const Logout = (req, res) => {\n  req.logout();\n  res.json({\n    message: \"Logout\"\n  });\n};\n"]}