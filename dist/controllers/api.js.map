{"version":3,"sources":["../../server/controllers/api.js"],"names":["ChangePremium","req","res","id","params","premium","body","Products","findOneAndUpdate","_id","$set","new","then","json","data","catch","status","message","err","CreateProduct","user","JSON","parse","headers","productDetails","Product","create","username","sid","console","log","GetProducts","page","parseInt","Number","Promise","all","find","count","sort","skip","limit","products","Users","$in","map","product","userName","filter","_doc","phoneNumber","error"],"mappings":"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","file":"api.js","sourcesContent":["import regeneratorRuntime from \"regenerator-runtime\"\nimport Product from '../models/Products'\nimport Users from '../models/Users'\n\nexport const ChangePremium = (req, res) => {\n  let id = req.params.id;\n  let { premium } = req.body;\n  Products.findOneAndUpdate(\n    {\n      _id: id\n    },\n    {\n      $set: {\n        premium\n      }\n    },\n    {\n      new: true\n    }\n  )\n    .then(data => res.json(data))\n    .catch(err =>\n      res.status(500).json({\n        message: err.message\n      })\n    );\n};\n\nexport const CreateProduct = (req, res) => {\n  let user = JSON.parse(req.headers.user)\n  let productDetails = req.body\n  Product.create({...productDetails, username: user.sid})\n    .then(data => res.json(data))\n    .catch(err => {\n      console.log(err)\n      res.status(500).json({ err: err, message: err.message })})\n}\n\nexport const GetProducts = async (req, res) => {\n  let page = parseInt(Number(req.params.id)) \n  if (!page) {\n    page = 1\n  }\n  try {\n    let [count, products] = await Promise.all([\n      Product.find().count(),\n      Product.find()\n      .sort('name')\n      .skip(page * 25 - 25)\n      .limit(25),\n    ])\n    let username = await Users.find({\n      sid: {\n        $in: products.map(product => product.username)\n      }\n    },\n    'username phoneNumber sid'\n  )\n  products = products.map(product => {\n    let userName = username.filter(user => user.sid === product.username)[0]\n    console.log(userName)\n    product._doc.username = userName ? userName.username : ''\n    product._doc.phoneNumber = userName ? userName.phoneNumber : ''\n    return product\n  })\n\n    return res.json({\n      count,\n      products,\n    })\n  } catch (err) {\n    console.log(err)\n    res.status(500).json({\n      message: 'Error Loading Product List',\n      error: err.message,\n    })\n  }\n\n}"]}