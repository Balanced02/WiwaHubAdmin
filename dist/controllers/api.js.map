{"version":3,"sources":["../../server/controllers/api.js"],"names":["ChangePremium","req","res","id","body","_id","premium","Products","findOneAndUpdate","$set","new","then","json","data","catch","status","message","err","CreateProduct","result","url","public_id","user","JSON","parse","title","state","localGovtArea","price","negotiable","productDetails","product","picName","Product","create","username","sid","console","log","GetProducts","page","parseInt","Number","params","searchKey","searchQuery","search","$regex","$options","$or","Promise","all","find","count","sort","skip","limit","products","Users","$in","map","userName","filter","_doc","phoneNumber","error","DeleteProduct","findOneAndRemove"],"mappings":"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","file":"api.js","sourcesContent":["import regeneratorRuntime from \"regenerator-runtime\";\nimport Product from \"../models/Products\";\nimport Users from \"../models/Users\";\nimport Products from \"../models/Products\";\n\nexport const ChangePremium = (req, res) => {\n  let id = req.body._id;\n  let premium  = req.body;\n  Products.findOneAndUpdate(\n    {\n      _id: id\n    },\n    {\n      $set: {\n        premium: !premium.premium\n      }\n    },\n    {\n      new: true\n    }\n  )\n    .then(data => res.json(data))\n    .catch(err =>\n      res.status(500).json({\n        message: err.message\n      })\n    );\n};\n\nexport const CreateProduct = (req, res, result) => {\n  const { url, public_id } = result\n  const user = req.user;\n  const {title, state, localGovtArea, price, negotiable} = JSON.parse(req.body.data)\n  const productDetails = {\n    title, state, localGovtArea, price, negotiable,\n    product: url,\n    picName: public_id\n  };\n  Product.create({ ...productDetails, username: user.sid })\n    .then(data => res.json(data))\n    .catch(err => {\n      console.log(err);\n      res.status(500).json({ err: err, message: err.message });\n    });\n};\n\nexport const GetProducts = async (req, res) => {\n  let page = parseInt(Number(req.params.id));\n  let searchKey = req.body.searchKey\n  let searchQuery = {}\n  if (searchKey) {\n    let search = {\n      $regex: searchKey || '',\n      $options: 'i',\n    }\n    searchQuery = {\n      $or: [\n        {\n          sid: search\n        },\n        {\n          product: search\n        },\n        {\n          state: search\n        },\n        {\n          localGovtArea: search\n        },\n        {\n          title: search\n        }\n      ]\n    };\n  }\n  if (!page) {\n    page = 1;\n  }\n  try {\n    let [count, products] = await Promise.all([\n      Product.find(searchQuery).count(),\n      Product.find(searchQuery)\n        .sort(\"created\")\n        .skip(page * 25 - 25)\n        .limit(25)\n    ]);\n    let username = await Users.find(\n      {\n        sid: {\n          $in: products.map(product => product.username)\n        }\n      },\n      \"username phoneNumber sid\"\n    );\n    products = products.map(product => {\n      let userName = username.filter(user => user.sid === product.username)[0];\n      product._doc.username = userName ? userName.username : \"\";\n      product._doc.phoneNumber = userName ? userName.phoneNumber : \"\";\n      return product;\n    });\n\n    return res.json({\n      count,\n      products\n    });\n  } catch (err) {\n    console.log(err);\n    res.status(500).json({\n      message: \"Error Loading Product List\",\n      error: err.message\n    });\n  }\n};\n\nexport const DeleteProduct = (req, res, result) => {\n  console.log(result)\n  let _id = req.params.id;\n  Products.findOneAndRemove({ _id }).then(data => res.json({\n    message: 'Deleted Successfully'\n  })).catch(err => {\n    res.status(500).json({\n      message: \"Unable to delete Product\",\n      error: err.message\n    });\n  });\n}"]}