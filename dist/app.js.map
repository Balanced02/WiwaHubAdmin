{"version":3,"sources":["../server/app.js"],"names":["require","config","app","disable","mongoose","connect","process","env","db","err","console","error","exit","log","dotenv","configPath","NODE_ENV","use","skip","get","bodyParser","json","urlencoded","extended","origin","credentials","express","static","path","join","__dirname","cloudinary","cloud_name","api_key","api_secret","uploadFile","Promise","resolve","reject","newFilename","imageFile","mv","name","uploader","upload","result","post","req","res","next","files","file","then","catch","status","routes","Error","send","message"],"mappings":"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","file":"app.js","sourcesContent":["import express from \"express\";\nimport path, { resolve } from \"path\";\nimport logger from \"morgan\";\nimport bodyParser from \"body-parser\";\nimport mongoose from \"mongoose\";\nimport morgan from \"morgan\";\nimport dotenv from \"dotenv\";\nimport routes from \"./routes\";\nimport cors from \"cors\";\nimport fileUpload from \"express-fileupload\";\nimport uuid from \"uuid/v4\";\nimport cloudinary from \"cloudinary\";\n\nrequire(\"dotenv\").config();\n\nconst app = express();\napp.disable(\"x-powered-by\");\n\nmongoose.connect(\n  process.env.db,\n  err => {\n    if (err) {\n      console.error(err);\n      process.exit(1);\n      return;\n    }\n    console.log(\"Database Connected Successfully!\");\n  }\n);\n\ndotenv.config({\n  configPath:\n    process.env.NODE_ENV === \"production\" ? \"../config/prod\" : \"../config/dev\"\n});\n\napp.use(\n  logger(\"dev\", {\n    skip: () => app.get(\"env\") === \"test\"\n  })\n);\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(\n  cors({\n    origin: \"https://wiwahub.herokuapp.com/\",\n    credentials: true\n  })\n);\napp.use(morgan(\"dev\"));\napp.use(fileUpload());\napp.use(\"/images\", express.static(path.join(__dirname, \"public\")));\n\n// app.engine('html', require('ejs').renderFile)\n// app.set('view engine', 'ejs')\ncloudinary.config({\n  cloud_name: process.env.cloud_name,\n  api_key: process.env.api_key,\n  api_secret: process.env.api_secret\n});\n\nconst uploadFile = imageFile => {\n  return new Promise((resolve, reject) => {\n    const newFilename = uuid();\n    imageFile.mv(\n      `${__dirname}/public/${newFilename}-${imageFile.name}`,\n      function(err) {\n        if (err) {\n          console.log(err)\n          reject(err);\n        }\n        cloudinary.uploader.upload(\n          `${__dirname}/public/${newFilename}-${imageFile.name}`,\n          result => {\n            resolve(result);\n          }\n        );\n      }\n    );\n  });\n};\n\napp.post(\"/api/uploadFile\", (req, res, next) => {\n  let imageFile = req.files.file;\n  uploadFile(imageFile)\n    .then(result => res.json({ file: result }))\n    .catch(err => res.status(500).json({ error: err }));\n});\n\n// Routes\napp.use(\"/\", routes);\n\n// Catch 404 and forward to error handler\napp.use((req, res, next) => {\n  const err = new Error(\"Not Found\");\n  err.status = 404;\n  next(err);\n});\n\n// Error handler\napp.use((err, req, res, next) => {\n  // eslint-disable-line no-unused-vars\n  res.status(err.status || 500).send({\n    error: \"Error 500\",\n    message: \"Error getting requested url\"\n  });\n});\n\nexport default app;\n"]}