{"version":3,"sources":["../server/app.js"],"names":["require","config","app","disable","mongoose","connect","process","env","db","err","console","error","exit","log","dotenv","configPath","NODE_ENV","use","skip","get","bodyParser","json","urlencoded","extended","origin","credentials","express","static","path","join","__dirname","cloudinary","cloud_name","api_key","api_secret","uploadFile","fs","readdir","files","file","unlink","Promise","resolve","reject","newFilename","imageFile","mv","name","uploader","upload","result","deleteImage","destroy","public_id","post","req","res","user","JSON","parse","headers","then","catch","status","body","picName","routes","next","Error","send","message"],"mappings":"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","file":"app.js","sourcesContent":["import express from \"express\";\nimport path, { resolve } from \"path\";\nimport fs from 'fs'\nimport logger from \"morgan\";\nimport bodyParser from \"body-parser\";\nimport mongoose from \"mongoose\";\nimport morgan from \"morgan\";\nimport dotenv from \"dotenv\";\nimport routes from \"./routes\";\nimport cors from \"cors\";\nimport fileUpload from \"express-fileupload\";\nimport uuid from \"uuid/v4\";\nimport cloudinary from \"cloudinary\";\nimport { CreateProduct, DeleteProduct } from \"./controllers/api\";\n\nrequire(\"dotenv\").config();\n\nconst app = express();\napp.disable(\"x-powered-by\");\n\nmongoose.connect(\n  process.env.db,\n  err => {\n    if (err) {\n      console.error(err);\n      process.exit(1);\n      return;\n    }\n    console.log(\"Database Connected Successfully!\");\n  }\n);\n\ndotenv.config({\n  configPath:\n    process.env.NODE_ENV === \"production\" ? \"../config/prod\" : \"../config/dev\"\n});\n\napp.use(\n  logger(\"dev\", {\n    skip: () => app.get(\"env\") === \"test\"\n  })\n);\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(\n  cors({\n    origin: \"http://wiwahub.herokuapp.com:3000\",\n    credentials: true\n  })\n);\napp.use(morgan(\"dev\"));\napp.use(fileUpload());\napp.use(\"/images\", express.static(path.join(__dirname, \"public\")));\n\n// app.engine('html', require('ejs').renderFile)\n// app.set('view engine', 'ejs')\ncloudinary.config({\n  cloud_name: process.env.cloud_name,\n  api_key: process.env.api_key,\n  api_secret: process.env.api_secret\n});\n\nconst uploadFile = imageFile => {\n  fs.readdir(path.join(__dirname, \"public\"), (err, files) => {\n    if (err) {\n      console.log(err)\n    };\n    for (const file of files) {\n      fs.unlink(path.join(path.join(__dirname, 'public'), file), err => {\n        if (err) {\n          console.log(err)\n        }\n      });\n    }\n  });\n  return new Promise((resolve, reject) => {\n    const newFilename = uuid();\n    imageFile.mv(\n      `${__dirname}/public/${newFilename}-${imageFile.name}`,\n      function(err) {\n        if (err) {\n          console.log(err)\n          reject(err);\n        }\n        cloudinary.uploader.upload(\n          `${__dirname}/public/${newFilename}-${imageFile.name}`,\n          result => {\n            resolve(result);\n          }\n        );\n      }\n    );\n  });\n};\n\nconst deleteImage = public_id => {\n  return new Promise((resolve, reject) => {\n    cloudinary.uploader.destroy(public_id, (err, result) => {\n      resolve(result)\n    })\n  })\n}\n\napp.post(\"/api/createProduct\", (req, res) => {\n  const user = JSON.parse(req.headers.user);\n  console.log(user)\n  let imageFile = req.files.file;\n  uploadFile(imageFile)\n    .then(result => CreateProduct(req, res, result))\n    .catch(err => res.status(500).json({ error: err }));\n});\n\napp.post('/api/deleteProduct/:id', (req, res) => {\n  let public_id = req.body.picName\n  deleteImage(public_id)\n    .then(result => DeleteProduct(req, res, result))\n    .catch(err => res.status(500).json({error: err}) )\n})\n\n\n// Routes\napp.use(\"/\", routes);\n\n// Catch 404 and forward to error handler\napp.use((req, res, next) => {\n  const err = new Error(\"Not Found\");\n  err.status = 404;\n  next(err);\n});\n\n// Error handler\napp.use((err, req, res, next) => {\n  // eslint-disable-line no-unused-vars\n  res.status(err.status || 500).send({\n    error: \"Error 500\",\n    message: \"Error getting requested url\"\n  });\n});\n\nexport default app;\n"]}