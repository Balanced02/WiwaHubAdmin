{"version":3,"sources":["../server/routes.js"],"names":["require","config","dotenv","configPath","process","env","NODE_ENV","router","api","use","express","static","path","join","__dirname","MongoStore","session","secret","SESSION_SECRET","resave","saveUninitialized","cookie","maxAge","store","mongooseConnection","mongoose","connection","upload","dest","passport","initialize","LocalStrategy","passportLocal","Strategy","Users","authenticate","serializeUser","deserializeUser","get","AuthMe","Logout","post","Register","Login","RedirectNoAuth","cloudinary","cloud_name","api_key","api_secret","uploadFile","fs","readdir","err","files","console","log","file","unlink","Promise","resolve","reject","newFilename","imageFile","mv","name","uploader","result","deleteImage","destroy","public_id","req","res","body","picName","then","catch","status","json","error","GetProducts","ChangePremium","user"],"mappings":"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","file":"routes.js","sourcesContent":["import express, { Router } from \"express\";\nimport path from \"path\";\nimport passport from \"passport\";\nimport passportLocal from \"passport-local\";\nimport multer from \"multer\";\nimport connectMongo from 'connect-mongo';\nimport session from 'express-session';\nimport cookieParser from 'cookie-parser'\nimport mongoose from 'mongoose'\nimport cfg from \"./controllers/config\";\nimport jwt from \"jsonwebtoken\";\nimport Users from \"./models/Users\";\nimport fileUpload from \"express-fileupload\";\nimport uuid from \"uuid/v4\";\nimport cloudinary from \"cloudinary\";\nimport morgan from \"morgan\";\nimport fs from 'fs'\nimport dotenv from \"dotenv\";\n\nrequire(\"dotenv\").config();\n\nimport { Register, Logout, Login, AuthMe, RedirectNoAuth} from \"./controllers/auth\";\nimport { GetProducts, ChangePremium, CreateProduct, DeleteProduct } from \"./controllers/api\";\n\ndotenv.config({\n  configPath:\n    process.env.NODE_ENV === \"production\" ? \"../config/prod\" : \"../config/dev\"\n});\n\n\nconst router = Router();\nconst api = Router();\n\nrouter.use(express.static(path.join(__dirname, \"../client/build\")));\n\nconst MongoStore = connectMongo(session)\nrouter.use(cookieParser())\nrouter.use(\n  session({\n    secret: process.env.SESSION_SECRET || 'unkn0wn wiwahub s3Cret',\n    resave: true,\n    saveUninitialized: true,\n    cookie: {\n      maxAge: 3.6e6, // 1 Hour session\n    },\n    store: new MongoStore({\n      mongooseConnection: mongoose.connection,\n    }),\n  })\n)\n\nvar upload = multer({ dest: \"./public/logos\" });\n\n// PassportJS Setup\nrouter.use(passport.initialize());\nrouter.use(passport.session())\n\n\nconst LocalStrategy = passportLocal.Strategy;\npassport.use(new LocalStrategy(Users.authenticate()));\npassport.serializeUser(Users.serializeUser())\npassport.deserializeUser(Users.deserializeUser())\n\n// passport.use(\n//   new JWTStrategy(\n//     {\n//       jwtFromRequest: ExtractJWT.fromAuthHeaderAsBearerToken(),\n//       secretOrKey: cfg.jwtSecret\n//     },\n//     function(jwtPayload, cb) {\n//       //find the user in db if needed. This functionality may be omitted if you store everything you'll need in JWT payload.\n//       return Users.findOne(jwtPayload.id)\n//         .then(user => {\n//           return cb(null, user);\n//         })\n//         .catch(err => {\n//           return cb(err);\n//         });\n//     }\n//   )\n// );\n\n//image upload temporary function\n\nrouter.use(\"/api\", api);\n\napi.get(\"/me\", AuthMe);\napi.get(\"/auth/logout\", Logout);\napi.post(\"/auth/register\", Register);\napi.post('/auth/login', passport.authenticate('local'), Login)\n// api.post(\"/auth/login\", function(req, res, next) {\n//   passport.authenticate(\"local\", { session: false }, (err, user, info) => {\n//     if (err || !user) {\n//       console.log(user);\n//       return res.status(400).json({\n//         message: \"Something is not right\",\n//         user: user\n//       });\n//     }\n//     req.login(user, { session: false }, err => {\n//       if (err) {\n//         res.send(err);\n//       }\n//       // generate a signed son web token with the contents of user object and return it in the response\n//       const token = jwt.sign(user.toJSON(), cfg.jwtSecret);\n//       console.log(\"Logged In!!!\");\n//       return res.json({\n//         user: {\n//           ...user,\n//           salt: undefined,\n//           hash: undefined\n//         },\n//         token\n//       });\n//     });\n//   })(req, res);\n// });\napi.use(RedirectNoAuth)\n\napi.use(morgan(\"dev\"));\napi.use(fileUpload());\napi.use(\"/images\", express.static(path.join(__dirname, \"../client/public\")));\n\n// app.engine('html', require('ejs').renderFile)\n// app.set('view engine', 'ejs')\ncloudinary.config({\n  cloud_name: process.env.cloud_name,\n  api_key: process.env.api_key,\n  api_secret: process.env.api_secret\n});\n\nconst uploadFile = imageFile => {\n  fs.readdir(path.join(__dirname, \"public\"), (err, files) => {\n    if (err) {\n      console.log(err)\n    };\n    for (const file of files) {\n      fs.unlink(path.join(path.join(__dirname, 'public'), file), err => {\n        if (err) {\n          console.log(err)\n        }\n      });\n    }\n  });\n  return new Promise((resolve, reject) => {\n    const newFilename = uuid();\n    imageFile.mv(\n      `${__dirname}/public/${newFilename}-${imageFile.name}`,\n      function(err) {\n        if (err) {\n          console.log(err)\n          reject(err);\n        }\n        cloudinary.uploader.upload(\n          `${__dirname}/public/${newFilename}-${imageFile.name}`,\n          result => {\n            resolve(result);\n          }\n        );\n      }\n    );\n  });\n};\n\nconst deleteImage = public_id => {\n  return new Promise((resolve, reject) => {\n    cloudinary.uploader.destroy(public_id, (err, result) => {\n      resolve(result)\n    })\n  })\n}\n\napi.post('/api/deleteProduct/:id', (req, res) => {\n  let public_id = req.body.picName\n  deleteImage(public_id)\n    .then(result => DeleteProduct(req, res, result))\n    .catch(err => res.status(500).json({error: err}) )\n})\n\n\napi.post('/getProducts/:id', GetProducts);\napi.post('/changePremium', ChangePremium);\napi.post(\"/createProduct\", (req, res) => {\n  const user = req.user;\n  console.log(user)\n  let imageFile = req.files.file;\n  uploadFile(imageFile)\n    .then(result => CreateProduct(req, res, result))\n    .catch(err => res.status(500).json({ error: err }));\n});\nexport default router;\n"]}