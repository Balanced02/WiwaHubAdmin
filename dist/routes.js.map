{"version":3,"sources":["../server/routes.js"],"names":["router","api","JWTStrategy","PassportJWT","Strategy","ExtractJWT","ExtractJwt","upload","dest","use","passport","initialize","LocalStrategy","passportLocal","Users","authenticate","jwtFromRequest","fromAuthHeaderAsBearerToken","secretOrKey","cfg","jwtSecret","jwtPayload","cb","findOne","id","then","user","catch","err","express","static","path","join","__dirname","get","AuthMe","Logout","post","Register","req","res","next","session","info","console","log","status","json","message","login","send","token","jwt","sign","toJSON","salt","undefined","hash","GetProducts","ChangePremium"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;AACA;;;;AAEA,IAAMA,SAAS,sBAAf;AACA,IAAMC,MAAM,sBAAZ;;AAEA,IAAMC,cAAcC,sBAAYC,QAAhC;AACA,IAAMC,aAAaF,sBAAYG,UAA/B;;AAEA,IAAIC,SAAS,sBAAO,EAAEC,MAAM,gBAAR,EAAP,CAAb;;AAEA;AACAR,OAAOS,GAAP,CAAWC,mBAASC,UAAT,EAAX;;AAEA,IAAMC,gBAAgBC,wBAAcT,QAApC;AACAM,mBAASD,GAAT,CAAa,IAAIG,aAAJ,CAAkBE,gBAAMC,YAAN,EAAlB,CAAb;AACAL,mBAASD,GAAT,CACE,IAAIP,WAAJ,CACE;AACEc,kBAAgBX,WAAWY,2BAAX,EADlB;AAEEC,eAAaC,iBAAIC;AAFnB,CADF,EAKE,UAASC,UAAT,EAAqBC,EAArB,EAAyB;AACvB;AACA,SAAOR,gBAAMS,OAAN,CAAcF,WAAWG,EAAzB,EACJC,IADI,CACC,gBAAQ;AACZ,WAAOH,GAAG,IAAH,EAASI,IAAT,CAAP;AACD,GAHI,EAIJC,KAJI,CAIE,eAAO;AACZ,WAAOL,GAAGM,GAAH,CAAP;AACD,GANI,CAAP;AAOD,CAdH,CADF;;AAmBA5B,OAAOS,GAAP,CAAWoB,kBAAQC,MAAR,CAAeC,eAAKC,IAAL,CAAUC,SAAV,EAAqB,iBAArB,CAAf,CAAX;;AAEA;;AAEAjC,OAAOS,GAAP,CAAW,MAAX,EAAmBR,GAAnB;;AAEAA,IAAIiC,GAAJ,CAAQ,KAAR,EAAeC,YAAf;AACAlC,IAAIiC,GAAJ,CAAQ,cAAR,EAAwBE,YAAxB;AACAnC,IAAIoC,IAAJ,CAAS,gBAAT,EAA2BC,cAA3B;AACArC,IAAIoC,IAAJ,CAAS,aAAT,EAAwB,UAASE,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AAC/C/B,qBAASK,YAAT,CAAsB,OAAtB,EAA+B,EAAE2B,SAAS,KAAX,EAA/B,EAAmD,UAACd,GAAD,EAAMF,IAAN,EAAYiB,IAAZ,EAAqB;AACtE,QAAIf,OAAO,CAACF,IAAZ,EAAkB;AAChBkB,cAAQC,GAAR,CAAYnB,IAAZ;AACA,aAAOc,IAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,iBAAS,wBADiB;AAE1BtB,cAAMA;AAFoB,OAArB,CAAP;AAID;AACDa,QAAIU,KAAJ,CAAUvB,IAAV,EAAgB,EAAEgB,SAAS,KAAX,EAAhB,EAAoC,eAAO;AACzC,UAAId,GAAJ,EAAS;AACPY,YAAIU,IAAJ,CAAStB,GAAT;AACD;AACD;AACA,UAAMuB,QAAQC,uBAAIC,IAAJ,CAAS3B,KAAK4B,MAAL,EAAT,EAAwBnC,iBAAIC,SAA5B,CAAd;AACAwB,cAAQC,GAAR,CAAY,cAAZ;AACA,aAAOL,IAAIO,IAAJ,CAAS;AACdrB,2BACKA,IADL;AAEE6B,gBAAMC,SAFR;AAGEC,gBAAMD;AAHR,UADc;AAMdL;AANc,OAAT,CAAP;AAQD,KAfD;AAgBD,GAxBD,EAwBGZ,GAxBH,EAwBQC,GAxBR;AAyBD,CA1BD;;AA4BAvC,IAAIoC,IAAJ,CAAS,kBAAT,EAA6BqB,gBAA7B;AACAzD,IAAIoC,IAAJ,CAAS,gBAAT,EAA2BsB,kBAA3B;;kBAEe3D,M","file":"routes.js","sourcesContent":["import express, { Router } from \"express\";\nimport path from \"path\";\nimport passport from \"passport\";\nimport passportLocal from \"passport-local\";\nimport multer from \"multer\";\nimport cfg from \"./controllers/config\";\nimport jwt from \"jsonwebtoken\";\nimport PassportJWT from \"passport-jwt\";\nimport Users from \"./models/Users\";\n\nimport { Register, Logout, AuthMe } from \"./controllers/auth\";\nimport { GetProducts, ChangePremium, } from \"./controllers/api\";\n\nconst router = Router();\nconst api = Router();\n\nconst JWTStrategy = PassportJWT.Strategy;\nconst ExtractJWT = PassportJWT.ExtractJwt;\n\nvar upload = multer({ dest: \"./public/logos\" });\n\n// PassportJS Setup\nrouter.use(passport.initialize());\n\nconst LocalStrategy = passportLocal.Strategy;\npassport.use(new LocalStrategy(Users.authenticate()));\npassport.use(\n  new JWTStrategy(\n    {\n      jwtFromRequest: ExtractJWT.fromAuthHeaderAsBearerToken(),\n      secretOrKey: cfg.jwtSecret\n    },\n    function(jwtPayload, cb) {\n      //find the user in db if needed. This functionality may be omitted if you store everything you'll need in JWT payload.\n      return Users.findOne(jwtPayload.id)\n        .then(user => {\n          return cb(null, user);\n        })\n        .catch(err => {\n          return cb(err);\n        });\n    }\n  )\n);\n\nrouter.use(express.static(path.join(__dirname, \"../client/build\")));\n\n//image upload temporary function\n\nrouter.use(\"/api\", api);\n\napi.get(\"/me\", AuthMe);\napi.get(\"/auth/logout\", Logout);\napi.post(\"/auth/register\", Register);\napi.post(\"/auth/login\", function(req, res, next) {\n  passport.authenticate(\"local\", { session: false }, (err, user, info) => {\n    if (err || !user) {\n      console.log(user);\n      return res.status(400).json({\n        message: \"Something is not right\",\n        user: user\n      });\n    }\n    req.login(user, { session: false }, err => {\n      if (err) {\n        res.send(err);\n      }\n      // generate a signed son web token with the contents of user object and return it in the response\n      const token = jwt.sign(user.toJSON(), cfg.jwtSecret);\n      console.log(\"Logged In!!!\");\n      return res.json({\n        user: {\n          ...user,\n          salt: undefined,\n          hash: undefined\n        },\n        token\n      });\n    });\n  })(req, res);\n});\n\napi.post('/getProducts/:id', GetProducts);\napi.post('/changePremium', ChangePremium);\n\nexport default router;\n"]}